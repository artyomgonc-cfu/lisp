(defun dig_to_w (n order)
  (cond
    ((eql order 1)
      (cond
        ((eql n 1) 'odin)
        ((eql n 2) 'dva)
        ((eql n 3) 'tri)
        ((eql n 4) 'chetyre)
        ((eql n 5) 'pyat)
        ((eql n 6) 'shest)
        ((eql n 7) 'sem)
        ((eql n 8) 'vosem)
        ((eql n 9) 'devyat)
        (T 'error)
      )
    )
    ((eql order 2)
      (cond
        ((eql n 1) 'desyat)
        ((eql n 2) 'dvadzat)
        ((eql n 3) 'tridzat)
        ((eql n 4) 'sorok)
        ((eql n 5) 'pyatdesyat)
        ((eql n 6) 'shestdesyat)
        ((eql n 7) 'semdesyat)
        ((eql n 8) 'vosemdesyat)
        ((eql n 9) 'devyanosto)
        (T 'error)
      )
    )
    ((eql order 3)
      (cond
        ((eql n 1) 'sto)
        ((eql n 2) 'dvesty)
        ((eql n 3) 'tristo)
        ((eql n 4) 'chetyresto)
        ((eql n 5) 'pyatsot)
        ((eql n 6) 'shestsot)
        ((eql n 7) 'semsot)
        ((eql n 8) 'vosemsot)
        ((eql n 9) 'devyatsot)
        (T 'error)
      )
    )
    (T 'error)
  )
)

(defun num_to_w (n len)
  (cond
    ((and (eql 0 n) (eql 1 len)) '(nol))
    ((eql 0 n) nil)
    (T (cond
          ((eql (rem n 10) 0) (num_to_w (floor (/ n 10)) (+ len 1)))
          (T (cons (dig_to_w (rem n 10) len) (num_to_w (floor (/ n 10)) (+ len 1))))
        )
    )
  )
)

(defun reverser (list)
  (cond 
    ((null list) nil)
    (t (append (reverser (cdr list)) (list (car list))))
  )
)

(defun replace10 (n)
  (cond 
    ((eql n 'odin) 'odinadzat)
    ((eql n 'dva) 'dvenadzat)
    ((eql n 'tri) 'trinadzat)
    ((eql n 'chetyre) 'chetyrnadzat)
    ((eql n 'pyat) 'pyatnadzat)
    ((eql n 'shest) 'shestnadzat)
    ((eql n 'sem) 'semnadzat)
    ((eql n 'vosem) 'vosemnadzat)
    ((eql n 'devyat) 'devyatnadzat)
  )
)

(defun clear10 (list clearp) 
  (cond
    ((null list) nil)
    ((and (eql 'desyat (car list)) (not (null (cdr list)))) (clear10 (cdr list) T))
    (clearp (cons (replace10 (car list)) (clear10 (cdr list) nil)))
    (T (cons (car list) (clear10 (cdr list) nil)))
  )
)

(defun solver (list)
  (cond 
    ((null list) nil)
    (T 
      (cons 
        (clear10 (reverser (num_to_w (car list) 1)) nil)
        (solver (cdr list))
      )
    )
  )
)


(print (solver '(5 12 0 252)))
(print (solver '(76 201 50)))
(print (solver '(450 919)))
